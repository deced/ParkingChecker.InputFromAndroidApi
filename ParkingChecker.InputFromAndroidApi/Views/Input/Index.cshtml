@{
    Layout = null;
}
<style>
  video  {
    width: 192px;
    height: 192px;
    background: rgba(0,0,0,0.2);
    -webkit-transform: scaleX(-1); /* mirror effect while using front cam */
    transform: scaleX(-1);         /* mirror effect while using front cam */
  }
  
  #canvas  {
    width: 192px;
    height: 192px;
    -webkit-transform: scaleX(-1); /* mirror effect while using front cam */
    transform: scaleX(-1);         /* mirror effect while using front cam */
  }
</style>
<div class="container p-5" align="center">
  <div class="">
    <b>Your Cam:</b><br>
    <video id="camera-stream" class="border border-5 border-danger"></video>
  </div>
  <div class="">
    <button disabled id="flip-btn" class="btn btn-sm btn-warning">
      Flip Camera
    </button>
    <button id="capture-camera" class="btn btn-sm btn-primary">
      Take photo
    </button>
  </div>
  <div class="mt-3">
    <b>Output:</b>
    <br>
    <canvas id="canvas" class="bg-light shadow border border-5 border-success">
    </canvas>
  </div>
</div>

<script>
    // camera stream video element
      let on_stream_video = document.querySelector('#camera-stream');
      // flip button element
      let flipBtn = adocument.querySelector('#flip-btn');
    
      // default user media options
      let constraints = { audio: false, video: true }
      let shouldFaceUser = true;
    
      // check whether we can use facingMode
      let supports = navigator.mediaDevices.getSupportedConstraints();
      if( supports['facingMode'] === true ) {
        flipBtn.disabled = false;
      }
    
      let stream = null;
    
      function capture() {
        constraints.video = {
            width: {
            min: 192,
            ideal: 192,
            max: 192,
          },
          height: {
            min: 192,
            ideal: 192,
            max: 192
          },
          facingMode: shouldFaceUser ? 'user' : 'environment'
        }
        navigator.mediaDevices.getUserMedia(constraints)
          .then(function(mediaStream) {
            stream  = mediaStream;
            on_stream_video.srcObject = stream;
            on_stream_video.play();
          })
          .catch(function(err) {
            console.log(err)
          });
      }
    
      flipBtn.addEventListener('click', function(){
        if( stream == null ) return
        // we need to flip, stop everything
        stream.getTracks().forEach(t => {
          t.stop();
        });
        // toggle / flip
        shouldFaceUser = !shouldFaceUser;
        capture();
      })
    
      capture();
    
      document.getElementById("capture-camera").addEventListener("click", function() {
        // Elements for taking the snapshot
          const video = document.querySelector('video');
          canvas.width = video.videoWidth;
          canvas.height = video.videoHeight;
          canvas.getContext('2d').drawImage(video, 0, 0);
      });
</script>